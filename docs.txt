?How do i use the payroll class 


'''the model instance can be created like this'''

payroll = Payroll.objects.create(name="Payroll 1", status="Pending")

staff_data_list = [
    {
        "staff_name": "Mohammed Hammed",
        "staff_id" : ID,
        "rank": "teacher",
        "tax": 20000,
        "basic_salary": 50000,
        "deduction": 0,
        "salary_to_be_paid": 3000,
        "account_number": 348488283,
        "bank": "Free Bank",
        "account_name": "NAME",
        "payment_status": "PENDING",
    },
    
    # Add more staff data dictionaries here...
]

payroll.add_staff(staff_data_list)
payroll.save()

''''''''''''''''''''''''''




'''the model class can be rretrieved like this'''
x = Payroll.objects.get(id)
staffs_list = json.loads(x.staffs)




'''the model class can be added like this'''
payroll = Payroll.objects.get(id=<your_payroll_id>)

single_staff_data = {
    "staff_name": "New Staff",
    "rank": "teacher",
    "tax": 15000,
    "basic_salary": 55000,
    "deduction": 0,
    "salary_to_be_paid": 3500,
    "account_number": 123456789,
    "bank": "Sample Bank",
    "account_name": "NEW NAME",
    "payment_status": "PENDING",
}

payroll.add_staff([single_staff_data])  # Wrap the single staff data in a list
payroll.save()





'''staffs can be removed from the payroll like this''
payroll = Payroll.objects.get(id=<your_payroll_id>)
staff_id_to_remove = "12345"  # Replace with the actual staff_id you want to remove
payroll.remove_staff_by_id(staff_id_to_remove)
payroll.save()






# from django.dispatch import Signal

# transaction_status = [('pending', 'Pending'), 
#                       ('approved', 'Approved'), 
#                       ('declined', 'Declined')]

# class Transaction_status(models.Model):
#     message = models.CharField(max_length=250, choices=transaction_status)

#     def __str__(self):
#         return str(self.message)

Transaction = Operations_account_transaction_record

@receiver(post_save, sender=Transaction)
def transaction_pending_handler(sender, instance, **kwargs):
    print(instance)
    if instance.status == "PENDING":
        message = "Transaction Pending"
        print("testing....")
        print("testing....")
        print("testing....")
        print("testing....")
        print("testing....")
        print(f'{message}')


@receiver(pre_save, sender=Transaction)
def transaction_approved_handler(sender, instance, **kwargs):
    if instance.status == "SUCCESS":
        message = "Transaction Approved"
        print(f'{message}')


@receiver(pre_save, sender=Transaction)
def transaction_declined_handler(sender, instance, **kwargs):
    if instance.status == "CANCELLED":
        message = "Transaction Declined"
        print(f'{message}')















- create Notifcation model
- function to invoke notification model
- notification is being created websocket to send notification 
-



class Structure (enum):
    APPROVED = Approved
    REQUEST = Request
    COMPLETED 




message = f'your  request for initializing salary payement has been approved by management'
There has a request from operations to initializing salary payement worth N2,000,000
There has a request from operations to initializing transfer transaction worth N200,000 
Salary payment has been completed with zero issues 
Transaction has been processed successfully to 



message = generate_notification_message()